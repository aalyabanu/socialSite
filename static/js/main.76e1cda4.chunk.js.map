{"version":3,"sources":["logo.png","Likes.js","Loves.js","Scard.js","View.js","Add.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Likes","event","console","log","this","props","postId","likeaction","Table","onClick","clickHandler","fluid","className","icon","bxLike","width","alt","no","React","Component","Loves","loveaction","likeIcon","Scard","Container","Card","Row","Col","xs","src","Header","as","id","Image","img","Body","Text","text","likes","loves","View","posts","map","current","i","key","postid","buildPosts","Add","state","toastr","options","closeButton","debug","extendedTimeOut","hideDuration","hideEasing","hideMethod","newestOnTop","onclick","positionClass","preventDuplicates","progressBar","showDuration","showEasing","showMethod","timeOut","clear","lastid","setState","newState","target","name","value","preventDefault","newId","onsubmit","success","Form","onSubmit","e","submitHandler","Group","controlId","Label","Control","type","onChange","handleChange","placeholder","Button","variant","App","undefined","listContents","localStorage","getItem","postValue","JSON","parse","length","postItem","concat","setItem","stringify","post","Navbar","expand","Brand","logo","Toggle","aria-controls","Collapse","Nav","to","path","updateListItems","exact","addLike","addLove","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yGAAAA,EAAOC,QAAU,IAA0B,kC,8QCqC5BC,E,2KA9BAC,GACXC,QAAQC,IAAIC,KAAKC,MAAMC,QACvBF,KAAKC,MAAME,WAAWH,KAAKC,MAAMC,U,+BAGzB,IAAD,OACP,OACE,oCACE,kBAACE,EAAA,EAAD,KACE,+BACE,4BACE,4BACE,kBAAC,OAAD,CACEC,QAAS,kBAAM,EAAKC,gBACpBC,OAAK,EACLC,UAAU,UACVC,KAAMC,IACNC,MAAM,OACNC,IAAI,eAGR,4BAAKZ,KAAKC,MAAMY,Y,GAtBVC,IAAMC,W,iBC+BXC,E,2KA9BAnB,GACXC,QAAQC,IAAIC,KAAKC,MAAMC,QACvBF,KAAKC,MAAMgB,WAAWjB,KAAKC,MAAMC,U,+BAGzB,IAAD,OACP,OACE,oCACE,kBAACE,EAAA,EAAD,KACE,+BACE,4BACE,4BACE,kBAAC,OAAD,CACEC,QAAS,kBAAM,EAAKC,gBACpBC,OAAK,EACLC,UAAU,UACVC,KAAMS,IACNP,MAAM,OACNC,IAAI,eAGR,4BAAKZ,KAAKC,MAAMY,Y,GAtBVC,IAAMC,W,gBCoDXI,E,uKAjDX,OACE,oCACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMb,UAAU,4BACd,kBAACc,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,yBAAKhB,UAAU,UACb,yBACEiB,IAAI,iDACJb,IAAI,mBAGR,kBAACS,EAAA,EAAKK,OAAN,CAAaC,GAAG,MAAhB,IAAuB3B,KAAKC,MAAM2B,KAEpC,kBAACL,EAAA,EAAD,KACE,kBAACM,EAAA,EAAD,CACEtB,OAAK,EACLC,UAAU,eACViB,IAAKzB,KAAKC,MAAM6B,IAChBlB,IAAKZ,KAAKC,MAAMW,MAElB,kBAACS,EAAA,EAAKU,KAAN,KACE,kBAACV,EAAA,EAAKW,KAAN,KAAYhC,KAAKC,MAAMgC,SAI7B,kBAACX,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,CACEV,GAAIb,KAAKC,MAAMiC,MACf/B,WAAYH,KAAKC,MAAME,WACvBD,OAAQF,KAAKC,MAAMC,UAGvB,kBAACqB,EAAA,EAAD,KACE,kBAAC,EAAD,CACEV,GAAIb,KAAKC,MAAMkC,MACflB,WAAYjB,KAAKC,MAAMgB,WACvBf,OAAQF,KAAKC,MAAMC,kB,GAxCjBY,IAAMC,WCkBXqB,E,2KAnBC,IAAD,OACX,OAAOpC,KAAKC,MAAMoC,MAAMC,KAAI,SAACC,EAAQC,GAAT,OAC1B,kBAAC,EAAD,CAAOC,IAAKD,EAAGtC,OAAQqC,EAAQG,OAAQd,GAAIW,EAAQX,GAAIE,IAAKS,EAAQT,IAAKG,KAAMM,EAAQN,KAAMC,MAAOK,EAAQL,MAAO/B,WAAY,EAAKF,MAAME,WAAYc,WAAY,EAAKhB,MAAMgB,WAAYkB,MAAOI,EAAQJ,a,+BAM1M,OACE,oCACE,6BACGnC,KAAK2C,mB,GAbG7B,IAAMC,W,iCCyFV6B,G,wDAtFb,WAAY3C,GAAQ,IAAD,8BACjB,cAAMA,IACD4C,MAAQ,CACX3C,OAAQ,EACR0B,GAAI,GACJK,KAAM,GACNH,IAAK,IAEPgB,IAAOC,QAAU,CACfC,aAAa,EACbC,OAAO,EACPC,gBAAiB,OACjBC,aAAc,OACdC,WAAY,SACZC,WAAY,UACZC,aAAa,EACbC,QAAS,KACTC,cAAe,uBACfC,mBAAmB,EACnBC,aAAa,EACbC,aAAc,MACdC,WAAY,QACZC,WAAY,SACZC,QAAS,QAEXhB,IAAOiB,QAzBU,E,gEA6BjBjE,QAAQC,IAAIC,KAAKC,MAAM+D,QACvBhE,KAAKiE,SAAS,CACZ/D,OAAQF,KAAKC,MAAM+D,W,mCAIVnE,GACX,IAAMqE,EAAW,GACjBA,EAASrE,EAAMsE,OAAOC,MAAQvE,EAAMsE,OAAOE,MAC3CrE,KAAKiE,SAASC,K,oCAGFrE,GACZA,EAAMyE,iBACN,IAAMC,EAAQvE,KAAK6C,MAAM3C,OAAS,EAClCJ,QAAQC,IAAIwE,GACZvE,KAAKC,MAAMuE,SAASD,EAAOvE,KAAK6C,MAAMjB,GAAI5B,KAAK6C,MAAMZ,KAAMjC,KAAK6C,MAAMf,IAAK,EAAG,GAC9EgB,IAAO2B,QAAQ,cACfzE,KAAKiE,SAAS,CACZ/D,OAAQqE,EACR3C,GAAI,GACJK,KAAM,GACNH,IAAK,GACLI,MAAO,EACPC,MAAM,GACLrC,QAAQC,IAAIC,KAAK6C,U,+BAIZ,IAAD,OACP,OACE,oCACE,kBAAC6B,EAAA,EAAD,CAAMC,SAAU,SAACC,GAAD,OAAO,EAAKC,cAAcD,KACxC,kBAACF,EAAA,EAAKI,MAAN,CAAYC,UAAU,UACpB,kBAACL,EAAA,EAAKM,MAAN,gBACA,kBAACN,EAAA,EAAKO,QAAN,CAAcb,KAAK,KAAKc,KAAK,OAAOb,MAAOrE,KAAK6C,MAAMjB,GAAIuD,SAAU,SAACP,GAAD,OAAO,EAAKQ,aAAaR,OAG/F,kBAACF,EAAA,EAAKI,MAAN,CAAYC,UAAU,QACpB,kBAACL,EAAA,EAAKM,MAAN,aACA,kBAACN,EAAA,EAAKO,QAAN,CAAcb,KAAK,OAAOc,KAAK,OAAOb,MAAOrE,KAAK6C,MAAMZ,KAAMoD,YAAY,OAAOF,SAAU,SAACP,GAAD,OAAO,EAAKQ,aAAaR,OAGtH,kBAACF,EAAA,EAAKI,MAAN,CAAYC,UAAU,OACpB,kBAACL,EAAA,EAAKM,MAAN,sBACA,kBAACN,EAAA,EAAKO,QAAN,CAAcb,KAAK,MAAMc,KAAK,OAAOb,MAAOrE,KAAK6C,MAAMf,IAAKuD,YAAY,uBAAuBF,SAAU,SAACP,GAAD,OAAO,EAAKQ,aAAaR,OAGpI,kBAACU,EAAA,EAAD,CAAQC,QAAQ,UAAUL,KAAK,UAA/B,oB,GA9EQpE,IAAMC,Y,gCCqGTyE,E,kDA/Fb,WAAYvF,GAAQ,IAAD,8BACjB,cAAMA,IACD4C,MAAQ,CACXR,MAAO,GACPnC,YAAQuF,GAJO,E,gEASjB,IAAMC,EAAeC,aAAaC,QAAQ,SACtCC,EAAY,EACZH,IACFG,EAAYC,KAAKC,MAAML,GAAcI,KAAKC,MAAML,GAAcM,OAAS,GACpEtD,QAGL1C,KAAKiE,SAAS,CAAE5B,MAAOyD,KAAKC,MAAML,IAAiB,GAAIxF,OAAQ2F,M,sCAGjDnD,EAAQd,EAAIK,EAAMH,EAAKI,EAAOC,GAAQ,IAAD,OAC7C8D,EAAW,CAAEvD,SAAQd,KAAIK,OAAMH,MAAKI,QAAOC,SACjDnC,KAAKiE,UACH,SAACpB,GAAD,MAAY,CACVR,MAAOQ,EAAMR,MAAM6D,OAAOD,OAE5B,kBAAMN,aAAaQ,QAAQ,QAASL,KAAKM,UAAU,EAAKvD,MAAMR,a,8BAI1DT,GAAK,IAAD,OACV5B,KAAKiE,UACH,SAACpB,GAAD,MAAY,CACVR,MAAOQ,EAAMR,MAAMC,KAAI,SAAC+D,GAAD,OACrBA,EAAK3D,SAAWd,EAAhB,2BAA0ByE,GAA1B,IAAgCnE,MAAOmE,EAAKnE,MAAQ,IAAMmE,SAG9D,kBAAMV,aAAaQ,QAAQ,QAASL,KAAKM,UAAU,EAAKvD,MAAMR,a,8BAI1DT,GAAK,IAAD,OACV5B,KAAKiE,UACH,SAACpB,GAAD,MAAY,CACVR,MAAOQ,EAAMR,MAAMC,KAAI,SAAC+D,GAAD,OACrBA,EAAK3D,SAAWd,EAAhB,2BAA0ByE,GAA1B,IAAgClE,MAAOkE,EAAKlE,MAAQ,IAAMkE,SAG9D,kBAAMV,aAAaQ,QAAQ,QAASL,KAAKM,UAAU,EAAKvD,MAAMR,a,+BAIxD,IAAD,OACP,OACE,kBAAC,IAAD,KACO,kBAACiE,EAAA,EAAD,CAAQC,OAAO,MAClB,kBAACD,EAAA,EAAOE,MAAR,KACE,yBAAK/E,IAAKgF,IAAM7F,IAAI,sBAAsBJ,UAAU,UAEtD,kBAAC8F,EAAA,EAAOI,OAAR,CAAeC,gBAAc,qBAC7B,kBAACL,EAAA,EAAOM,SAAR,CAAiBhF,GAAG,oBAClB,kBAACiF,EAAA,EAAD,CAAKrG,UAAU,WACb,kBAAC,IAAD,CAAMA,UAAU,WAAWsG,GAAG,KAA9B,gBAGA,kBAAC,IAAD,CAAMtG,UAAU,WAAWsG,GAAG,QAA9B,oBAON,kBAAC1F,EAAA,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO2F,KAAK,QACV,kBAAC,EAAD,CACEvC,SAAU,SAAC9B,EAAQd,EAAIK,EAAMH,EAAKI,EAAOC,GAA/B,OACR,EAAK6E,gBAAgBtE,EAAQd,EAAIK,EAAMH,EAAKI,EAAOC,IAErD6B,OAAQhE,KAAK6C,MAAM3C,UAGvB,kBAAC,IAAD,CAAO+G,OAAK,EAACF,KAAK,KAChB,kBAAC,EAAD,CACE1E,MAAOrC,KAAK6C,MAAMR,MAClBlC,WAAY,SAACyB,GAAD,OAAQ,EAAKsF,QAAQtF,IACjCX,WAAY,SAACW,GAAD,OAAQ,EAAKuF,QAAQvF,OAGrC,kBAAC,IAAD,CAAOmF,KAAK,KAAZ,+B,GAzFMjG,IAAMC,WCCJqG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvI,QAAQuI,MAAMA,EAAMC,c","file":"static/js/main.76e1cda4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.20d6a460.png\";","import React from \"react\";\nimport Table from \"react-bootstrap/Table\";\n// npm install --save-dev @iconify/react @iconify/icons-bx\nimport { Icon, InlineIcon } from \"@iconify/react\";\nimport bxLike from \"@iconify/icons-bx/bx-like\";\n\nclass Likes extends React.Component {\n  clickHandler(event) {\n    console.log(this.props.postId);\n    this.props.likeaction(this.props.postId);\n  }\n\n  render() {\n    return (\n      <>\n        <Table>\n          <tbody>\n            <tr>\n              <td>\n                <Icon\n                  onClick={() => this.clickHandler()}\n                  fluid\n                  className=\"mx-auto\"\n                  icon={bxLike}\n                  width=\"25px\"\n                  alt=\"like logo\"\n                />\n              </td>\n              <td>{this.props.no}</td>\n            </tr>\n          </tbody>\n        </Table>\n      </>\n    );\n  }\n}\n\nexport default Likes;\n","import React from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\n// npm install --save-dev @iconify/react @iconify/icons-flat-color-icons\r\nimport { Icon, InlineIcon } from \"@iconify/react\";\r\nimport likeIcon from \"@iconify/icons-flat-color-icons/like\";\r\n\r\nclass Loves extends React.Component {\r\n  clickHandler(event) {\r\n    console.log(this.props.postId);\r\n    this.props.loveaction(this.props.postId);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Table>\r\n          <tbody>\r\n            <tr>\r\n              <td>\r\n                <Icon\r\n                  onClick={() => this.clickHandler()}\r\n                  fluid\r\n                  className=\"mx-auto\"\r\n                  icon={likeIcon}\r\n                  width=\"25px\"\r\n                  alt=\"love logo\"\r\n                />\r\n              </td>\r\n              <td>{this.props.no}</td>\r\n            </tr>\r\n          </tbody>\r\n        </Table>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Loves;\r\n","import React from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Image from \"react-bootstrap/Image\";\r\nimport Likes from \"./Likes\";\r\nimport Loves from \"./Loves\";\r\nimport { Container, Col, Row } from \"react-bootstrap\";\r\n\r\nclass Scard extends React.Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Container>\r\n          <Card className=\"mx-auto text-center mt-2\">\r\n            <Row>\r\n              <Col xs=\"3\">\r\n                <div className=\"avatar\">\r\n                  <img\r\n                    src=\"http://www.croop.cl/UI/twitter/images/doug.jpg\"\r\n                    alt=\"dougie avatar\"\r\n                  />\r\n                </div>\r\n                <Card.Header as=\"h5\">@{this.props.id}</Card.Header>\r\n              </Col>\r\n              <Col>\r\n                <Image\r\n                  fluid\r\n                  className=\"mx-auto pt-3\"\r\n                  src={this.props.img}\r\n                  alt={this.props.alt}\r\n                />\r\n                <Card.Body>\r\n                  <Card.Text>{this.props.text}</Card.Text>\r\n                </Card.Body>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <Likes\r\n                  no={this.props.likes}\r\n                  likeaction={this.props.likeaction}\r\n                  postId={this.props.postId}\r\n                />\r\n              </Col>\r\n              <Col>\r\n                <Loves\r\n                  no={this.props.loves}\r\n                  loveaction={this.props.loveaction}\r\n                  postId={this.props.postId}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </Card>\r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Scard;\r\n","import React from 'react';\r\nimport './App.scss';\r\nimport Scard from './Scard';\r\n\r\nclass View extends React.Component {\r\n\r\n  buildPosts() {\r\n    return this.props.posts.map((current,i) => (\r\n      <Scard key={i} postId={current.postid} id={current.id} img={current.img} text={current.text} likes={current.likes} likeaction={this.props.likeaction} loveaction={this.props.loveaction} loves={current.loves} />\r\n    )\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div>\r\n          {this.buildPosts()}\r\n        </div>\r\n       \r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default View;\r\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport toastr from 'toastr';\nimport 'toastr/build/toastr.min.css'\n\nclass Add extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      postId: 0,\n      id: \"\",\n      text: \"\",\n      img: \"\",\n    }\n    toastr.options = {\n      closeButton: true,\n      debug: false,\n      extendedTimeOut: \"1000\",\n      hideDuration: \"1000\",\n      hideEasing: \"linear\",\n      hideMethod: \"fadeOut\",\n      newestOnTop: false,\n      onclick: null,\n      positionClass: \"toast-top-full-width\",\n      preventDuplicates: true,\n      progressBar: true,\n      showDuration: \"300\",\n      showEasing: \"swing\",\n      showMethod: \"fadeIn\",\n      timeOut: \"5000\",\n    };\n    toastr.clear();\n  }\n\n  componentDidMount() {\n    console.log(this.props.lastid)\n    this.setState({\n      postId: this.props.lastid\n    })\n  }\n\n  handleChange(event) {\n    const newState = {};\n    newState[event.target.name] = event.target.value;\n    this.setState(newState);\n  }\n\n  submitHandler(event) {\n    event.preventDefault();\n    const newId = this.state.postId + 1\n    console.log(newId)\n    this.props.onsubmit(newId, this.state.id, this.state.text, this.state.img, 0, 0);\n    toastr.success(\"post added\");\n    this.setState({\n      postId: newId,\n      id: \"\",\n      text: \"\",\n      img: \"\",\n      likes: 0,\n      loves:0\n    }, console.log(this.state))\n  }\n\n\n  render() {\n    return (\n      <>\n        <Form onSubmit={(e) => this.submitHandler(e)} >\n          <Form.Group controlId=\"userID\">\n            <Form.Label>User ID</Form.Label>\n            <Form.Control name=\"id\" type=\"text\" value={this.state.id} onChange={(e) => this.handleChange(e)} />\n          </Form.Group>\n\n          <Form.Group controlId=\"text\">\n            <Form.Label>Text</Form.Label>\n            <Form.Control name=\"text\" type=\"text\" value={this.state.text} placeholder=\"text\" onChange={(e) => this.handleChange(e)} />\n          </Form.Group>\n\n          <Form.Group controlId=\"img\">\n            <Form.Label>Image Address</Form.Label>\n            <Form.Control name=\"img\" type=\"text\" value={this.state.img} placeholder=\"insert url for image\" onChange={(e) => this.handleChange(e)} />\n          </Form.Group>\n\n          <Button variant=\"primary\" type=\"submit\">\n            Add Bubble\n  </Button>\n        </Form>\n      </>\n    );\n  }\n\n}\nexport default Add;\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Container from \"react-bootstrap/Container\";\nimport \"./App.scss\";\nimport View from \"./View\";\nimport Add from \"./Add\";\nimport { HashRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport logo from \"./logo.png\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      posts: [],\n      postId: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const listContents = localStorage.getItem(\"posts\");\n    let postValue = 0;\n    if (listContents) {\n      postValue = JSON.parse(listContents)[JSON.parse(listContents).length - 1]\n        .postid;\n    }\n\n    this.setState({ posts: JSON.parse(listContents) || [], postId: postValue });\n  }\n\n  updateListItems(postid, id, text, img, likes, loves) {\n    const postItem = { postid, id, text, img, likes, loves };\n    this.setState(\n      (state) => ({\n        posts: state.posts.concat(postItem),\n      }),\n      () => localStorage.setItem(\"posts\", JSON.stringify(this.state.posts))\n    );\n  }\n\n  addLike(id) {\n    this.setState(\n      (state) => ({\n        posts: state.posts.map((post) =>\n          post.postid === id ? { ...post, likes: post.likes + 1 } : post\n        ),\n      }),\n      () => localStorage.setItem(\"posts\", JSON.stringify(this.state.posts))\n    );\n  }\n\n  addLove(id) {\n    this.setState(\n      (state) => ({\n        posts: state.posts.map((post) =>\n          post.postid === id ? { ...post, loves: post.loves + 1 } : post\n        ),\n      }),\n      () => localStorage.setItem(\"posts\", JSON.stringify(this.state.posts))\n    );\n  }\n\n  render() {\n    return (\n      <Router>\n             <Navbar expand=\"md\">\n          <Navbar.Brand>\n            <img src={logo} alt=\"social network logo\" className=\"Logo\" />\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Link className=\"nav-link\" to=\"/\">\n                View bubbles\n              </Link>\n              <Link className=\"nav-link\" to=\"/add\">\n                Blow a bubble\n              </Link>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n\n        <Container>\n          <Switch>\n            <Route path=\"/add\">\n              <Add\n                onsubmit={(postid, id, text, img, likes, loves) =>\n                  this.updateListItems(postid, id, text, img, likes, loves)\n                }\n                lastid={this.state.postId}\n              />\n            </Route>\n            <Route exact path=\"/\">\n              <View\n                posts={this.state.posts}\n                likeaction={(id) => this.addLike(id)}\n                loveaction={(id) => this.addLove(id)}\n              />\n            </Route>\n            <Route path=\"/\">Error: 404 not found</Route>\n          </Switch>\n        </Container>\n      </Router>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}